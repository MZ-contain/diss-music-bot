import disnake
from disnake.ext import commands
import yt_dlp as youtube_dl
from os import environ
from asyncio import sleep
import json
from typing import Optional

#disnake.opus.load_opus("/opt/homebrew/Cellar/opus/1.3.1/lib/libopus.dylib")
bot = commands.Bot(command_prefix='*', help_command=None, intents=disnake.Intents.all())
is_play = False
vc = None

class MenuPlayButtons(disnake.ui.View):
  def __init__(self):
    super().__init__(timeout=20)
    self.value = Optional[bool]
  
  @disnake.ui.button(label='–í–µ—Ä–Ω—É—Ç—å—Å—è', emoji='‚Ü©', style=disnake.ButtonStyle.blurple) #1-—è –∫–Ω–æ–ø–∫–∞; label='–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏'; style=disnake.ButtonStyle.—Ü–≤–µ—Ç
  async def ret(self, button: disnake.ui.Button, inter: disnake.CommandInteraction):
    await inter.response.defer()
    view = disnake.ui.View(timeout=20)
    view.add_item(MenuPlay())
    await inter.edit_original_response('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', view=view)
    self.value = True
    self.stop()
  @disnake.ui.button(label='–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', style=disnake.ButtonStyle.red) #1-—è –∫–Ω–æ–ø–∫–∞; label='–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏'; style=disnake.ButtonStyle.—Ü–≤–µ—Ç
  async def close(self, button: disnake.ui.Button, inter: disnake.CommandInteraction):
    await inter.message.delete()
    self.value = False
    self.stop()
    

class MenuPlay(disnake.ui.Select):
  def __init__(self):
    options = [
      disnake.SelectOption(label='–û—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ', value='videos', emoji='üé∂', description='–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–Ω—ë–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è'),
      disnake.SelectOption(label='–ü–ª–µ–π–ª–∏—Å—Ç—ã', value='playlist', emoji='üìº', description='–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è')]
    super().__init__(placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', options=options, custom_id='play', min_values=1, max_values=1)
  
  async def callback(self, inter: disnake.MessageInteraction):
    await inter.response.defer()
    if inter.values[0] == 'playlist':
      view2 = MenuPlayButtons()
      view2.add_item(MenuPlayPlaylist())
      await inter.edit_original_response('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç', view=view2)
    if inter.values[0] == 'videos':
      view2 = MenuPlayButtons()
      view2.add_item(MenuPlayVideo())
      await inter.edit_original_response('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ', view=view2)

class MenuPlayPlaylist(disnake.ui.Select):
  def __init__(self):
    with open('', 'r') as f:
      links = json.load(f)
    options = []
    playlists = links['playlist'][0]
    playlists = sorted(playlists.items())
    for i in range(len(playlists)):
      options.append(disnake.SelectOption(label=playlists[i][0], value=i))
    super().__init__(placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç', options=options, custom_id='play_playlist', min_values=1, max_values=1)
  async def callback(self, inter: disnake.MessageInteraction):
    await inter.response.defer()
    await play_playlist(inter, int(inter.values[0])) 

class MenuPlayVideo(disnake.ui.Select):
  def __init__(self):
    with open('', 'r') as f:
      links = json.load(f)
    options = []
    music = links['music'][0]
    music = sorted(music.items())
    for i in range(len(music)):
      options.append(disnake.SelectOption(label=music[i][0], value=i))
    super().__init__(placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ', options=options, custom_id=' ideo', min_values=1, max_values=1)
  async def callback(self, inter: disnake.MessageInteraction):
    await inter.response.defer()
    await play_video(inter, int(inter.values[0]))

async def play_video(inter, i):
  global vc, is_play
  YDL_OPTIONS = {'format': 'bestaudio'}
  FFMPEG_OPTIONS = {'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5', 'options': '-vn'}
  try:
    v_channel = inter.author.voice.channel
    vc = await v_channel.connect(reconnect=True)
  except:
    await inter.edit_original_message('–í—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –±–æ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', view=None)
    await sleep(3)
    view2 = MenuPlayButtons()
    view2.add_item(MenuPlayVideo())
    await inter.edit_original_message('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ', view=view2)
    return
  with open('', 'r') as f:
    links = json.load(f)
  music = links['music'][0]
  music = sorted(music.items())
  await inter.delete_original_message()
  msg = await inter.channel.send('–ó–∞–≥—Ä—É–∑–∫–∞...')
  is_play = True
  while is_play:
    for j in range(int(i), len(music)):
      if is_play == False:
        break
      await msg.edit(content=f'–í–∏–¥–µ–æ **{j+1}/{len(music)}**:\n```\n{music[j][0]}\n```', view=None)
      with youtube_dl.YoutubeDL(YDL_OPTIONS) as ydl:
        info = ydl.extract_info(music[j][1], download=False)
      for format in info['formats']:
        if format["ext"] == "m4a":
          url = format['url']
      vc.play(disnake.FFmpegPCMAudio(executable="ffmpeg\\ffmpeg.exe", source=url, **FFMPEG_OPTIONS))
      while vc.is_playing():
        await sleep(1)
    i = 0
  vc = None


async def play_playlist(inter, i):
  global vc, is_play
  YDL_OPTIONS = {'format': 'bestaudio'}
  FFMPEG_OPTIONS = {'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5', 'options': '-vn'}
  with open('', 'r') as f:
    links = json.load(f)
  playlist = links['playlist'][0]
  playlist = sorted(playlist.items())
  is_play = True
  await inter.edit_original_message('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ\n*–ñ–¥–∏—Ç–µ —ç—Ç–æ –¥–æ–ª–≥–æ...*', view=None)
  try:
    with youtube_dl.YoutubeDL(YDL_OPTIONS) as ydl:
      info = ydl.extract_info(playlist[i][1], download=False)
  except:
    await inter.edit_original_message('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç', view=None)
    await sleep(3)
    view2 = MenuPlayButtons()
    view2.add_item(MenuPlayPlaylist())
    await inter.edit_original_message('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç', view=view2)
    return
  await inter.author.voice.channel.connect()
  await inter.delete_original_message()
  msg = await inter.channel.send('–ó–∞–≥—Ä—É–∑–∫–∞...')
  while is_play:
    for m in range(len(info['entries'])):
      if is_play == False:
        break
      name = info['entries'][m]['title']
      n = len(info['entries'])
      await msg.edit(content=f'–ü–ª–µ–π–ª–∏—Å—Ç:\n```\n{playlist[i][0]}\n```\n–í–∏–¥–µ–æ **{m+1}/{n}**:\n```\n{name}\n```', view=None)
      for format in info['entries'][m]['formats']:
        if format["ext"] == "m4a":
          url = format['url']
      vc = inter.guild.voice_client
      vc.play(disnake.FFmpegPCMAudio(executable="ffmpeg\\ffmpeg.exe", source=url, **FFMPEG_OPTIONS))
      while vc.is_playing():
        await sleep(1)
    i = 0
  vc = None


@bot.slash_command(description='–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞')
async def play(ctx: disnake.CommandInteraction):
  view = disnake.ui.View(timeout=20)
  view.add_item(MenuPlay())
  await ctx.response.send_message('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', view=view)

@bot.slash_command(description='–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ')
@commands.has_permissions(kick_members=True)
async def add(ctx: disnake.CommandInteraction, choice:str = commands.Param(description='–í–∏–¥–µ–æ/–ü–ª–µ–π–ª–∏—Å—Ç', choices=['–í–∏–¥–µ–æ', '–ü–ª–µ–π–ª–∏—Å—Ç']), url:str = commands.Param(description='–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª—è–µ–º–æ–µ –≤–∏–¥–µ–æ')):
  await ctx.response.defer()
  if choice == '–í–∏–¥–µ–æ':
    if url.startswith('https://youtu.be/') or url.startswith('https://www.youtube.com/watch') and not url.startswith('https://youtube.com/playlist') and not url.startswith('https://www.youtube.com/playlist'):
      YDL_OPTIONS = {'format': 'bestaudio'}
      with open('', 'r') as f:
        links = json.load(f)
      with youtube_dl.YoutubeDL(YDL_OPTIONS) as ydl:
        info = ydl.extract_info(url, download=False)
      music = links['music'][0]
      if info['title'] in music:
        await ctx.edit_original_response('–≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
      else:
        links['music'][0][info['title']] = url
        with open('', 'w') as f:
          json.dump(links, f)
        await ctx.edit_original_response('–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: **"'+ info['title'] +'"**')
    else:
      await ctx.edit_original_response('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ')
  
  elif choice == '–ü–ª–µ–π–ª–∏—Å—Ç':
    if url.startswith('https://youtube.com/playlist') or url.startswith('https://www.youtube.com/playlist'):
      YDL_OPTIONS = {'format': 'bestaudio'}
      with open('', 'r') as f:
        links = json.load(f)
      try:
        with youtube_dl.YoutubeDL(YDL_OPTIONS) as ydl:
          info = ydl.extract_info(url, download=False)
      except:
        await ctx.edit_original_response('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç')
        return
      playlist = links['playlist'][0]
      if info['title'] in playlist:
        await ctx.edit_original_response('–≠—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
      else:
        links['playlist'][0][info['title']] = url
        with open('', 'w') as f:
          json.dump(links, f)
        await ctx.edit_original_response('–ü–ª–µ–π–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω: **"'+ info['title'] +'"**')
    else:
      await ctx.edit_original_response('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç')

@bot.slash_command(description='–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤')
async def list(ctx: disnake.CommandInteraction):
  await ctx.response.defer()
  embed = disnake.Embed(title='–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ', colour=disnake.Colour.from_rgb(2, 224, 95))
  embed2 = disnake.Embed(title='–°–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤', colour=disnake.Colour.from_rgb(154, 6, 199))
  with open('', 'r') as f:
    links = json.load(f)
  music = links['music'][0]
  music = sorted(music.items())
  playlist = links['playlist'][0]
  playlist = sorted(playlist.items())
  for i in music:
    embed.add_field(name=f'{music.index(i)+1}. {i[0]}', value=i[1], inline=False)
  for i in playlist:
    embed2.add_field(f'{playlist.index(i)+1}. {i[0]}', value=i[1], inline=False)
  await ctx.edit_original_response(embeds=[embed, embed2])

@bot.slash_command(description='–£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤–∏–¥–µ–æ')
@commands.has_permissions(kick_members=True)
async def remove(ctx: disnake.CommandInteraction, choice:str = commands.Param(description='–í–∏–¥–µ–æ/–ü–ª–µ–π–ª–∏—Å—Ç', choices=['–í–∏–¥–µ–æ', '–ü–ª–µ–π–ª–∏—Å—Ç']), number:int=commands.Param(description='–ù–æ–º–µ—Ä —É–¥–∞–ª—è–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ `/list`')):
  await ctx.response.defer()
  with open('', 'r') as f:
    links = json.load(f)
  if choice == '–í–∏–¥–µ–æ':
    musics = links['music'][0]
    music = sorted(musics.items())
    if number > len(music) or number <= 0:
      await ctx.edit_original_response('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ')
    else:
      await ctx.edit_original_response(f'–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: **"{music[number-1][0]}"**')
      del links['music'][0][music[number-1][0]]
  elif choice == '–ü–ª–µ–π–ª–∏—Å—Ç':
    playlists = links['playlist'][0]
    playlist = sorted(playlists.items())
    if number > len(playlist) or number <= 0:
      await ctx.edit_original_response('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞')
    else:
      await ctx.edit_original_response(f'–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω: **"{playlist[number-1][0]}"**')
      del links['playlist'][0][playlist[number-1][0]]
    
  with open('C:\disss\–∞—É–¥–∏–æ-–±–æ—Ç\', 'w') as f:
    json.dump(links, f)

@bot.slash_command(description='–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–∏–¥–µ–æ')
async def next(ctx: disnake.CommandInteraction, arg:str = commands.Param(description='–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–∏–¥–µ–æ', choices=['Video'])):
  await ctx.response.defer(ephemeral=True)
  if vc != None:
    if arg == 'Video':
      vc.stop()
      await ctx.edit_original_response('–£—Å–ø–µ—à–Ω–æ')
  else:
    await ctx.edit_original_response('–ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è')

@bot.slash_command(description='–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')
async def stop(ctx: disnake.CommandInteraction):
  global is_play
  await ctx.response.defer(ephemeral=True)
  if vc != None:
    vc.stop()
    await vc.disconnect()
    is_play = False
    await ctx.edit_original_response('–£—Å–ø–µ—à–Ω–æ')
  else:
    await ctx.edit_original_response('–ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è') 
  
bot.run('')
